import { notesIndex } from "@/lib/db/pinecone";
import prisma from "@/lib/db/prisma";
import { getEmbedding } from "@/lib/openai";
import { auth } from "@clerk/nextjs/server";
// import { streamText } from "ai";

import groq from "@/lib/groq"; 
// Import your groq configuration

// export const runtime = 'edge';

export async function POST(req: Request) {
  try {
      const body = await req.json();
      const messages = body.messages;
      const messagesTruncated = messages.slice(-6);
      
      const embedding = await getEmbedding(
        messagesTruncated.map((message: { content: string }) => message.content).join("\n"),
      );

      // console.log('Embedding:', embedding);

      const { userId } = await auth();

      // Debug vector query
      let vectorQueryResponse;
      try {
        vectorQueryResponse = await notesIndex.query({
          vector: embedding,
          topK: 4,
          filter: { userId },
        });
        console.log('Vector query response:', vectorQueryResponse);
      } catch (error) {
        console.error('Vector query failed:', error);
        throw error;
      }
      const relevantNotes = await prisma.note.findMany({
        where: {
          id: {
            in: vectorQueryResponse.matches.map((match) => match.id),
          },
        },
      });


      console.log("relevantNotes", relevantNotes);
      const systemMessage = 
          "You are NOTAKI.AI, a helpful focused friendly AI assistant focused on helping with note-taking.\n\n" +
          "RESPONSE TYPES:\n\n" +
        
          "1. For Greetings (‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, hi, hello):\n" +
          "Respond exactly: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠ NOTAKI.AI ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡πÇ‡∏ô‡πä‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡∏ö'\n\n" +
          
          "2. For Off-Topic or Fun Questions:\n" +
          "- Respond in a casual, friendly Thai style\n" +
          "- Use light humor and wordplay\n" +
          "- Keep responses short and playful\n" +
          "- Add '‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡πÇ‡∏ô‡πä‡∏ï ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö' at the end if appropriate\n\n" +
          
          "Examples of Off-Topic Responses:\n" +
          "User: ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏π‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏´‡∏°\n" +
          "Response: ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏î‡∏µ üòã\n\n" +
          
          "User: ‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£\n" +
          "Response: ‡∏ú‡∏°‡∏Å‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ô‡πä‡∏ï‡∏ô‡∏µ‡πà‡∏ú‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢ üòÑ\n\n" +
          
          
          "3. For Note-Related Queries:\n" +
          "Use this structured approach with proper formatting:\n\n" +
        
          "Thought Process (ToT):\n" +
          "‚Ä¢ Query Type: note-related/general/administrative\n" +
          "‚Ä¢ Information Available: yes/no\n" +
          "‚Ä¢ Complexity: simple/detailed\n\n" +
          
          "Response Structure:\n" +
          "Thought: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n" +
          "Action: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n" +
          "Response: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô..\n" +
          "Observation: ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\n" +

          "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:\n" +
          "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å:\n" +
          "‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà 1\n" +
          "‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà 2\n\n" +
          
          "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n" +
          "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 1\n" +
          "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 2\n\n" +
          
          "‡∏™‡∏£‡∏∏‡∏õ:\n" +
          "‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πà‡∏≤‡∏á‡πÜ]\n\n" +
          
          "Observation: [‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°]\n\n" +
          
          "EXAMPLES:\n\n" +
          
          "Example 1 - Note Search:\n" +
          "User: ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡πÇ‡∏ô‡πä‡∏ï‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πà‡∏≠‡∏¢\n" +
          "Thought: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå\n" +
          "Action: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n" +
          "Response:\n" +
          "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:\n" +
          "‚Ä¢ ‡∏û‡∏ö‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå\n\n" +
          
          "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:\n" +
          "‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: [‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï]\n" +
          "‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: [‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï]\n" +
          "‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°: [‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï]\n\n" +
          
          "‡∏ß‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:\n" +
          "‚Ä¢ ‡∏ß‡∏≤‡∏£‡∏∞‡∏ó‡∏µ‡πà 1: [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î]\n" +
          "‚Ä¢ ‡∏ß‡∏≤‡∏£‡∏∞‡∏ó‡∏µ‡πà 2: [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î]\n" +
          "Observation: ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n\n" +
          
          "Example 2 - General Question:\n" +
          "User: NOTAKI.AI ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á\n" +
          "Thought: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö\n" +
          "Action: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á NOTAKI.AI\n" +
          "Response:\n" +
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏•‡∏±‡∏Å:\n" +
          "‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πä‡∏ï\n" +
          "‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤\n" +
          "‚Ä¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏ô‡πä‡∏ï\n\n" +
          
          "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n" +
          "‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n" +
          "‚Ä¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n" +
          "‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç\n" +
          "Observation: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå\n\n" +
          
          "Example 3 - Summary Request:\n" +
          "User: ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏ô‡πä‡∏ï‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\n" +
          "Thought: ‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô\n" +
          "Action: ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n" +
          "Response:\n" +
          "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:\n" +
          "‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£:\n" +
          "  - JR Pass ‡∏£‡∏≤‡∏Ñ‡∏≤ 14,000 ‡πÄ‡∏¢‡∏ô\n" +
          "  - ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ 7 ‡∏ß‡∏±‡∏ô\n\n" +
          
          "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:\n" +
          "‚Ä¢ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n" +
          "  - ‡πÄ‡∏°‡∏∑‡∏≠‡∏áA ‚Üí ‡πÄ‡∏°‡∏∑‡∏≠‡∏áB\n" +
          "  - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n\n" +
          
          "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:\n" +
          "‚Ä¢ ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å: xxx ‡πÄ‡∏¢‡∏ô/‡∏Ñ‡∏∑‡∏ô\n" +
          "‚Ä¢ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: xxx ‡πÄ‡∏¢‡∏ô/‡∏°‡∏∑‡πâ‡∏≠\n" +
          "Observation: ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß\n\n" +
      
          "Example 4 - Cross-Reference Analysis:\n" +
          "User: ‡∏°‡∏µ‡πÇ‡∏ô‡πä‡∏ï‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ deploy Next.js ‡∏ö‡πâ‡∏≤‡∏á\n" +
          "Thought: ‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Next.js ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ deploy\n" +
          "Action: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n" +
          "Response:\n" +
          "‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n" +
          "‚Ä¢ ‡∏Å‡∏≤‡∏£ Deploy ‡∏î‡πâ‡∏ß‡∏¢ Vercel:\n" +
          "  - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: small to medium apps\n" +
          "  - ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ: zero-configuration\n\n" +
          
          "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:\n" +
          "‚Ä¢ Environment Variables\n" +
          "‚Ä¢ Database Connections\n\n" +
          
          "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy:\n" +
          "‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n" +
          "‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Git\n" +
          "Observation: ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö performance optimization\n\n" +
      
          "Example 5 - Time-based Query:\n" +
          "User: ‡∏´‡∏≤‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß\n" +
          "Thought: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n" +
          "Action: ‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'\n" +
          "Response:\n" +
          "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:\n" +
          "‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà XX:\n" +
          "  - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°]\n" +
          "  - ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°: [‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠]\n\n" +
          
          "‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:\n" +
          "‚Ä¢ [‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà 1]\n" +
          "‚Ä¢ [‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà 2]\n\n" +
          
          "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•:\n" +
          "‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥\n" +
          "‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á\n" +
          "Observation: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤\n\n" +

          "Example 6 - Recommendation query related to notes:\n" +
          "User: ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß pitch ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\n" +
          "Thought: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ô‡πä‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° pitch\n" +
          "Action: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£ pitch ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á script \n" +
          "Response:\n" +
          "‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡∏µ‡πâ \n"+
          "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß Pitch ‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n" +
          "‚Ä¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 3-5 ‡∏ô‡∏≤‡∏ó‡∏µ\n" +
          "‚Ä¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ hook ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à\n" +
          "‚Ä¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ problem ‡πÅ‡∏•‡∏∞ solution ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n" +
          "Observation: ‡∏Ñ‡∏ß‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏û‡∏π‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à\n\n" +
          
          "FORMATTING RULES:\n" +
          "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô\n" +
          "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô\n" +
          "‚Ä¢ ‡πÉ‡∏ä‡πâ bullet points (‚Ä¢) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n" +
          "‚Ä¢ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡πÜ‡πÜ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ\n\n" +
          
          "The relevant notes for this query are:\n" +
          relevantNotes
            .map((note) => `Title: ${note.title}\n\nContent:\n${note.content}`)
            .join("\n\n");

      console.log("systemMessage :", systemMessage);
      // Use the groq client directly instead of AI SDK's groq
      const completion = await groq.chat.completions.create({
        messages: [
          { role: "system", content: systemMessage },
          ...messagesTruncated
        ],
        model: "llama-3.1-8b-instant",
        temperature: 0.3, //more deterministics outputs
        max_tokens: 1024,
        top_p: 0.2, //lower = focused 
        stream: false
      });

      console.log("completion", completion);

      // Debug stream chunks
      // let fullContent = '';
      // Create a transform stream to format the response according to AI SDK expectations

      //streaming response
      // const encoder = new TextEncoder();
      // const stream = new ReadableStream({
      //   async start(controller) {
      //     try {
      //       const completionArray = Array.isArray(completion) ? completion : [completion];
      //       for await (const chunk of completionArray) {
      //         console.log("retrieved chunk", chunk);
      //         // Extract the content from the chunk
      //         const content = chunk.choices[0]?.delta?.content;
      //         console.log("extracted chunk", content);
      //         if (content) {
      //           // Format the chunk according to AI SDK expectations
      //           const formattedMessage = {
      //             id: chunk.id || crypto.randomUUID(),
      //             role: 'assistant',
      //             content,
      //             createdAt: Date.now(),
      //           };
      //           console.log("formattedMessage", formattedMessage);

      //           // Send in the exact format expected by the AI SDK
      //           const formattedChunk = `data: ${JSON.stringify(formattedMessage)}\n\n`;
      //           console.log("formattedChunk", formattedChunk);
      //           controller.enqueue(encoder.encode(formattedChunk));
      //         } else if (chunk.choices[0]?.finish_reason === 'stop') {
      //           // Send the DONE message in the correct format
      //           controller.enqueue(encoder.encode('data: [DONE]\n\n'));
      //         }
      //       }
      //       controller.close();
      //     } catch (error) {
      //       console.error('Streaming error:', error);
      //       controller.error(error);
      //     }
      //   }
      // });

      // Handle non-streaming response
      // Format the response message
      // const responseMessage = {
      //   id: completion.id || crypto.randomUUID(),
      //   role: 'assistant',
      //   content: completion.choices[0]?.message?.content || '',
      //   createdAt: Date.now(),
      // };

      // console.log("Response message:", responseMessage);

      // // Create the stream with proper SSE formatting
      // const encoder = new TextEncoder();
      // const stream = new ReadableStream({
      //   async start(controller) {
      //     try {
      //       // Send the message chunk
      //       const chunk = JSON.stringify({ messages: [responseMessage] });
      //       controller.enqueue(encoder.encode(`data: ${chunk}\n\n`));
            
      //       // Send the DONE message
      //       controller.enqueue(encoder.encode('data: [DONE]\n\n'));
      //       controller.close();
      //     } catch (error) {
      //       console.error('Streaming error:', error);
      //       controller.error(error);
      //     }
      //   }
      // });
      
      // Get the completion content
      const responseContent = completion.choices[0]?.message?.content || '';
      console.log("Response content:\n", responseContent);

      const formattedResponse = {
        id: completion.id || crypto.randomUUID(),
        role: 'assistant',
        content: responseContent,
        createdAt: Date.now()
      };
      console.log("formattedResponse", formattedResponse);
      // Return as a proper stream
      // Create a stream that follows the AI SDK format
      // const stream = new ReadableStream({
      //   start(controller) {
      //     const encoder = new TextEncoder();
      //     // Send the message in the format expected by the AI SDK
      //     controller.enqueue(
      //       encoder.encode(`data: ${JSON.stringify({ messages: [formattedResponse] })}\n\n`)
            
      //     );
      //     // Send the DONE signal
      //     controller.enqueue(encoder.encode('data: [DONE]\n\n'));
      //     console.log("DONE");
      //     controller.close();
      //   },
      // });
      const stream = new ReadableStream({
        start(controller) {
          const encoder = new TextEncoder();
          // Send just the text content
          controller.enqueue(encoder.encode(responseContent));
          controller.close();
        }
      });
      console.log("readableStream:", stream);

      return new Response(stream, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });

  


  } catch (error) {
    console.error('Groq completion failed:', error);
    throw error;
  }
}
